{"version":3,"sources":["types/index.ts","components/TextField.tsx","components/DropDown.tsx","components/Flexi.tsx","flexiConfig.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ItemType","TextField","_ref","name","label","onChange","value","react_default","a","createElement","type","event","target","DropDown","values","disabled","map","key","Flexi","onSubmit","config","initialFormData","generateInitialFormData","items","forEach","item","children","_useState","useState","_useState2","Object","slicedToArray","formData","setFormData","handleFieldChange","objectSpread","defineProperty","fields","generateFields","reduce","push","components_TextField","concat","components_DropDown","renderField","apply","toConsumableArray","Fragment","className","preventDefault","JSON","stringify","normalFlexiConfig","recursiveFlexiConfig","App","components_Flexi","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9609c620.chunk.js","sourcesContent":["export enum ItemType {\n  TextField = 'TextField',\n  DropDown = 'DropDown'\n}\n\nexport interface FlexiConfigTextFieldItem {\n  name: string;\n  label: string;\n  type: ItemType;\n  children?: FlexiConfig;\n}\n\nexport interface FlexiConfigDropDownItem {\n  name: string;\n  label: string;\n  type: ItemType;\n  values: string[];\n  children?: FlexiConfig;\n}\n\nexport type FlexiConfigItem =\n  | FlexiConfigTextFieldItem\n  | FlexiConfigDropDownItem;\n\nexport interface FlexiConfig {\n  items: FlexiConfigItem[];\n}\n\nexport interface FormData {\n  [name: string]: string;\n}\n","import React, { ChangeEvent } from 'react';\n\ntype Props = {\n  name: string;\n  label: string;\n  value: string;\n  onChange: (name: string, value: string) => void;\n  key: string;\n};\n\nconst TextField = ({ name, label, onChange, value }: Props): JSX.Element => {\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const value = event.target.value;\n    onChange(name, value);\n  };\n\n  return (\n    <label>\n      {label}\n      <input type=\"text\" value={value} onChange={handleChange} />\n    </label>\n  );\n};\n\nexport default TextField;\n","import React, { ChangeEvent } from 'react';\n\ntype Props = {\n  name: string;\n  label: string;\n  values: string[];\n  value: string;\n  onChange: (name: string, value: string) => void;\n  key: string;\n};\n\nconst DropDown = ({ name, label, values, onChange, value }: Props) => {\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>): void => {\n    const value = event.target.value;\n    onChange(name, value);\n  };\n\n  return (\n    <label>\n      {label}\n      <select value={value} onChange={handleChange}>\n        <option value={''} disabled>\n          Choose {label}\n        </option>\n        {values.map(value => (\n          <option value={value} key={value}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nexport default DropDown;\n","import React, { useState, FormEvent } from 'react';\n\nimport TextField from './TextField';\nimport DropDown from './DropDown';\n\nimport {\n  FlexiConfig,\n  ItemType,\n  FlexiConfigDropDownItem,\n  FlexiConfigItem,\n  FormData\n} from '../types/index';\n\ntype Props = {\n  onSubmit: (formData: FormData) => void;\n  config: FlexiConfig;\n};\n\nconst Flexi = ({ onSubmit, config }: Props): JSX.Element => {\n  const initialFormData: FormData = {};\n\n  const generateInitialFormData = (items: FlexiConfigItem[]): void => {\n    items.forEach(item => {\n      initialFormData[item.name] = '';\n      if (item.children) {\n        generateInitialFormData(item.children.items);\n      }\n    });\n  };\n\n  generateInitialFormData(config.items);\n\n  const [formData, setFormData] = useState<FormData>(initialFormData);\n\n  const handleFieldChange = (name: string, value: string): void => {\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    onSubmit(formData);\n  };\n\n  const renderField = (item: FlexiConfigItem): JSX.Element | null => {\n    switch (item.type) {\n      case ItemType.TextField:\n        return (\n          <TextField\n            name={item.name}\n            label={item.label}\n            value={formData[item.name]}\n            onChange={handleFieldChange}\n            key={`${item.name}${item.type}`}\n          />\n        );\n      case ItemType.DropDown:\n        return (\n          <DropDown\n            name={item.name}\n            label={item.label}\n            values={(item as FlexiConfigDropDownItem).values}\n            value={formData[item.name]}\n            onChange={handleFieldChange}\n            key={`${item.name}${item.type}`}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  const generateFields = (config: FlexiConfig): (JSX.Element | null)[] => {\n    return config.items.reduce((fields: (JSX.Element | null)[], item) => {\n      fields.push(renderField(item));\n      if (item.children) {\n        fields.push(...generateFields(item.children));\n      }\n      return fields;\n    }, []);\n  };\n\n  const fields = generateFields(config);\n\n  return (\n    <>\n      <form className=\"Flexi\" onSubmit={handleSubmit}>\n        {fields}\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <div className=\"Flexi-state\">\n        <p>Component State:</p>\n        <pre>{JSON.stringify(formData)}</pre>\n      </div>\n    </>\n  );\n};\n\nexport default Flexi;\n","import { FlexiConfig, ItemType } from './types/index';\n\nexport const normalFlexiConfig: FlexiConfig = {\n  items: [\n    {\n      name: 'name',\n      label: \"Person's Name\",\n      type: ItemType.TextField\n    },\n    {\n      name: 'state',\n      label: \"Person's State\",\n      type: ItemType.DropDown,\n      values: ['Maharashtra', 'Kerala', 'Tamil Nadu']\n    }\n  ]\n};\n\nexport const recursiveFlexiConfig: FlexiConfig = {\n  items: [\n    {\n      name: 'title',\n      label: \"Person's Title\",\n      type: ItemType.TextField,\n      children: normalFlexiConfig\n    },\n    {\n      name: 'hobbies',\n      label: \"Person's Hobbies\",\n      type: ItemType.TextField\n    }\n  ]\n};\n","import React, { Component } from 'react';\n\nimport Flexi from './components/Flexi';\n\nimport { normalFlexiConfig, recursiveFlexiConfig } from './flexiConfig';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Flexi Component Demo</h1>\n        </header>\n        <Flexi onSubmit={() => {}} config={recursiveFlexiConfig} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}